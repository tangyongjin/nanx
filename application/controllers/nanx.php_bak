<?php

if (!defined('BASEPATH'))
    exit('No direct script access allowed');
class Nanx extends CI_Controller
{

    function actionCfg()
    {

        $cfg = array(
            'create_base_table' => array(
                'tbused' => 'nanx_biz_tables',
                'dbcmdtype' => 'insert',
                'paracfg' => array('table_screen_name' => 'input_0', 'table_name' =>
                        'selected_value')),
            'delete_biz_table' => array(
                'tbused' => 'nanx_biz_tables',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),

            'rename_biz_table' => array(
                'tbused' => 'nanx_biz_tables',
                'dbcmdtype' => 'update',
                'paracfg' => array('table_screen_name' => 'input_0'),
                'wherecfg' => array('pid' => 'pid')),

            'rename_activity' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'update',
                'paracfg' => array('grid_title' => 'input_0'),
                'wherecfg' => array('pid' => 'pid')),

            'set_activity_base_table' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'update',
                'paracfg' => array('base_table' => 'selected_value'),
                'prefix_process_field' => 'base_table',
                'wherecfg' => array('pid' => 'pid')),

            'set_forbidden_col' => array(
                'tbused' => 'nanx_activity_forbidden_field',
                'dbcmdtype' => 'insert_batch',
                'batch_col' => 'field',
                'paracfg' => array('activity_code' => 'hostby', 'field' => 'selected_value')),

            'delete_activity' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),

            'add_activity' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'insert',
                'paracfg' => array(
                    'activity_code' => 'input_0',
                    //  'screen_name' => 'input_1',
                    'grid_title' => 'input_1',
                    'base_table' => 'selected_value'),
                'prefix_process_field' => 'base_table',
                'default' => array(
                    'activity_type' => 'table',
                    'pic_url' => 'default_act.png',
                    'data_url' => 'curd/listData')),
                    
           
           
            'add_js_activity' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'insert',
                'paracfg' => array(
                    'activity_code' => 'input_0',
                    'grid_title' => 'input_1',
                    'js_function_point' => 'input_3',
                    'extra_js' => 'file2upload'
                    ),
                'default' => array(
                    'activity_type' => 'js',
                    'pic_url' => 'default_act.png',
                    'data_url' => 'curd/listData')),
                    
           
           
          'add_service_activity' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'insert',
                'paracfg' => array(
                    'activity_code' => 'input_0',
                    'grid_title' => 'input_1',
                    'service_url' => 'input_2' 
                    ),
                'default' => array(
                    'activity_type' => 'service',
                    'pic_url' => 'default_act.png',
                    'data_url' => 'curd/listData')),
           
             
             
              'add_public_item' => array(
                'tbused' => 'nanx_activity_field_public_display_cfg',
                'dbcmdtype' => 'insert',
                'paracfg' => array('field_e' => 'input_0','field_c'=>'input_1')
                ),

             

            'add_user' => array(
                'tbused' => 'nanx_user',
                'dbcmdtype' => 'insert',
                'paracfg' => array('user' => 'input_0'),
                'default' => array('password' => '12345678', 'active' => 'Y')),

            'reset_pwd' => array(
                'tbused' => 'nanx_user',
                'dbcmdtype' => 'update',
                'paracfg' => array('password' => 'input_0'),
                'wherecfg' => array('user' => 'nodevalue')
             ),


          

            'delete_public_item' => array(
                'tbused' => 'nanx_activity_field_public_display_cfg',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'nodevalue')),


            'delete_user' => array(
                'tbused' => 'nanx_user',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),

            'reset_raw_table' => array(
                'tbused' => 'nanx_biz_tables',
                'dbcmdtype' => 'update',
                'paracfg' => array('table_name' => 'selected_value'),
                'wherecfg' => array('pid' => 'pid')),

            'rename_role' => array(
                'tbused' => 'nanx_user_role',
                'dbcmdtype' => 'update',
                'paracfg' => array('role_name' => 'input_0'),
                'wherecfg' => array('pid' => 'pid')),

            'add_role' => array(
                'tbused' => 'nanx_user_role',
                'dbcmdtype' => 'insert',
                'paracfg' => array('role_code' => 'input_0', 'role_name' => 'input_1')),

            'delete_role' => array(
                'tbused' => 'nanx_user_role',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),

            'remove_activity' => array(
                'tbused' => 'nanx_user_role_privilege',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),


            'reest_pwd' => array(
                'tbused' => 'nanx_user',
                'dbcmdtype' => 'update',
                'paracfg' => array('password' => 'input_0'),
                'wherecfg' => array('pid' => 'pid')),

            'rename_btn' => array(
                'tbused' => 'nanx_activity_btns',
                'dbcmdtype' => 'update',
                'paracfg' => array('btn_name' => 'input_0'),
                'wherecfg' => array('pid' => 'pid')),

            'rename_plugin_btn' => array(
                'tbused' => 'nanx_activity_plugin_btns',
                'dbcmdtype' => 'update',
                'paracfg' => array('btn_name' => 'input_0'),
                'wherecfg' => array('pid' => 'pid')),




            'set_referenced_activity' => array(
                'tbused' => 'nanx_activity_btns',
                'dbcmdtype' => 'update',
                'paracfg' => array('activity_for_btn' => 'selected_value'),
                'wherecfg' => array('pid' => 'pid')),

            'remove_btn' => array(
                'tbused' => 'nanx_activity_btns',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),
                
            'remove_plugin_btn' => array(
                'tbused' => 'nanx_activity_plugin_btns',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),
                

            'remove_user' => array(
                'tbused' => 'nanx_user_role_assign',
                'dbcmdtype' => 'delete',
                'paracfg' => array('pid' => 'pid')),


            'add_button' => array(
                'tbused' => 'nanx_activity_btns',
                'dbcmdtype' => 'insert',
                'paracfg' => array(
                    'activity_code' => 'hostby',
                    'btn_name' => 'input_0',
                    'activity_for_btn' => 'selected_value_nanxdropdown_0')),

            'add_js_button' => array(
                'tbused' => 'nanx_activity_plugin_btns',
                'dbcmdtype' => 'insert',
                'paracfg' => array(
                    'activity_code' => 'hostby',
                    'btn_name' => 'input_0',
                    'function_name' => 'input_2',
                    'jsfile' => 'file2upload')),

            'set_filter_col' => array(
                'tbused' => 'nanx_activity_btns',
                'dbcmdtype' => 'update',
                'paracfg' => array('field_for_main_activity' => 'selected_value_nanxdropdown_1',
                        'field_for_sub_activity' => 'selected_value_nanxdropdown_2'),
                'wherecfg' => array('pid' => 'pid')),

            'rename_field' => array(
                'tbused' => 'nanx_activity_field_special_display_cfg',
                'dbcmdtype' => 'insert_or_update', //insert a row or update a row already exists
                'paracfg' => array('field_c' => 'input_0', ),
                'wherecfg' => array('base_table' => 'hostby', 'field_e' => 'nodevalue')),

            'set_biz_field_combo_resorce' => array(
                'tbused' => 'nanx_biz_column_editor_cfg',
                'dbcmdtype' => 'insert_or_update', //insert a row or update a row already exists
                'paracfg' => array(
                    'base_table' => 'hostby',
                    'field_e' => 'nodevalue',
                    'combo_table' => 'selected_value_nanxdropdown_0',
                    'list_field' => 'selected_value_nanxdropdown_1',
                    'value_field' => 'selected_value_nanxdropdown_2'),
                'fixed_cfg' => array(),
                'prefix_process_field' => 'combo_table',
                'wherecfg' => array('field_e' => 'nodevalue', 'base_table' => 'hostby')),
            
            'set_show_as_pic' => array(
                'tbused' => 'nanx_activity_field_special_display_cfg',
                'dbcmdtype' => 'set_action', //insert a row or update a row already exists
                'paracfg' => array('show_as_pic' => 'input_1'),
                'wherecfg' => array('base_table' => 'hostby', 'field_e' => 'nodevalue')),


            'set_to_me' => array(
                'tbused' => 'nanx_biz_column_editor_cfg',
                'dbcmdtype' => 'set_action', //insert a row or update a row already exists
                'paracfg' => array('is_produce_col' => 'input_1'),
                'wherecfg' => array('base_table' => 'hostby', 'field_e' => 'nodevalue')),

            'set_use_html_editor' => array(
                'tbused' => 'nanx_biz_column_editor_cfg',
                'dbcmdtype' => 'set_action', //insert a row or update a row already exists
                'paracfg' => array('edit_as_html' => 'input_1'),
                'wherecfg' => array('base_table' => 'hostby', 'field_e' => 'nodevalue')),

            'set_upload_field' => array(
                'tbused' => 'nanx_biz_column_editor_cfg',
                'dbcmdtype' => 'set_action', //insert a row or update a row already exists
                'paracfg' => array('need_upload' => 'input_1'),
                'wherecfg' => array('base_table' => 'hostby', 'field_e' => 'nodevalue')),


            'delete_col' => array(
                'dbcmdtype' => 'delete_col',
                'tbused' => 'dependnextarray',
                'paracfg' => array('dropcol' => 'nodevalue', 'usedtable' => 'hostby')),

            'rename_col' => array(
                'dbcmdtype' => 'rename_col',
                'tbused' => 'dependnextarray',
                'paracfg' => array(
                    'usedtable' => 'hostby',
                    'orgincol' => 'nodevalue',
                    'newcolname' => 'input_0',
                    'column_definition' => 'column_definition')),

            'set_col_displayname' => array(
                'tbused' => 'nanx_activity_field_special_display_cfg',
                'dbcmdtype' => 'insert_or_update', //insert a row or update a row already exists
                'paracfg' => array(
                    'base_table' => 'hostby',
                    'field_e' => 'nodevalue',
                    'field_c' => 'input_0'),
                'wherecfg' => array('base_table' => 'hostby', 'field_e' => 'nodevalue')),

            'set_activity_pic' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'update',
                'paracfg' => array('pic_url' => 'piccb'),
                'wherecfg' => array('pid' => 'pid')),


            'truncate_table' => array(
                'dbcmdtype' => 'truncate_table',
                'tbused' => 'dependnextarray',
                'paracfg' => array('usedtable' => 'input_0'),
                ),


            'rename_table' => array(
                'dbcmdtype' => 'rename_table',
                'tbused' => 'dependnextarray',
                'paracfg' => array('usedtable' => 'nodevalue', 'newtable' => 'input_0'),
                ),

            'reorder_col' => array(
                'dbcmdtype' => 'reorder_col',
                'tbused' => 'dependnextarray',
                'paracfg' => array('usedtable' => 'input_0'),
                ),


            'drop_table' => array(
                'dbcmdtype' => 'drop_table',
                'tbused' => 'dependnextarray',
                'paracfg' => array('usedtable' => 'input_0'),
                ),
            'null' => array());
        return $cfg;
    }


    function DndCfg()
    {
        $cfg = array(

            'dnd_set_activity_base_table' => array(
                'tbused' => 'nanx_activity',
                'dbcmdtype' => 'update',
                'paracfg' => array('base_table' => array('paraused' => 'src', 'value' =>
                            'raw_table')),
                'wherecfg' => array('pid' => array('paraused' => 'target', 'value' => 'pid'))),

            'reset_raw_table' => array(
                'tbused' => 'nanx_biz_tables',
                'dbcmdtype' => 'update',
                'paracfg' => array('table_name' => 'selected_value'),
                'wherecfg' => array('pid' => 'pid')),

            'reuse_button' => array(
                'tbused' => 'nanx_activity_btns',
                'dbcmdtype' => 'insert',
                'paracfg' => array(
                    'activity_code' => 'hostby',
                    'btn_name' => 'input_0',
                    'activity_for_btn' => 'nanxdropdown_0')),

            'dnd_user_role_add_activity' => array(
                'tbused' => 'nanx_user_role_privilege',
                'dbcmdtype' => 'insert',
                'paracfg' => array('activity_code' => array('paraused' => 'src', 'value' =>
                            'value'), 'role_code' => array('paraused' => 'target', 'value' => 'value'))),

          'dnd_user_role_add_service_activity' => array(
                'tbused' => 'nanx_user_role_privilege',
                'dbcmdtype' => 'insert',
                'paracfg' => array('activity_code' => array('paraused' => 'src', 'value' =>
                            'value'), 'role_code' => array('paraused' => 'target', 'value' => 'value'))),


          'dnd_user_role_add_js_activity' => array(
                'tbused' => 'nanx_user_role_privilege',
                'dbcmdtype' => 'insert',
                'paracfg' => array('activity_code' => array('paraused' => 'src', 'value' =>
                            'value'), 'role_code' => array('paraused' => 'target', 'value' => 'value'))),

           'dnd_user_role_add_html_activity' => array(
                'tbused' => 'nanx_user_role_privilege',
                'dbcmdtype' => 'insert',
                'paracfg' => array('activity_code' => array('paraused' => 'src', 'value' =>
                            'value'), 'role_code' => array('paraused' => 'target', 'value' => 'value'))),




            'add_user_to_role' => array(
                'tbused' => 'nanx_user_role_assign',
                'dbcmdtype' => 'insert',
                'paracfg' => array('user' => array('paraused' => 'src', 'value' => 'value'),
                        'role_code' => array('paraused' => 'target', 'value' => 'value'))));
        return $cfg;
    }


    function getDndOpcodeCfg()
    {
        $cfg = array(
            'dnd_set_activity_base_table' => array('src' => 'biz_table', 'target' =>
                    'activity'),
            'reset_raw_table' => array('src' => 'raw_table', 'target' => 'biz_table'),
            'reuse_button' => array('src' => 'button', 'target' => 'activity'),
        
            'dnd_user_role_add_activity' => array('src' => 'activity', 'target' =>
                    'user_role_under_acls'),
              
            'dnd_user_role_add_service_activity' => array('src' => 'activity_service', 'target' =>
                    'user_role_under_acls'),
                    
        
            'dnd_user_role_add_js_activity' => array('src' => 'activity_js', 'target' =>
                    'user_role_under_acls'),
        
            'dnd_user_role_add_html_activity' => array('src' => 'activity_html', 'target' =>
                    'user_role_under_acls'),
                    
            'add_user_to_role' => array('src' => 'user', 'target' => 'user_role'),
            );
        return $cfg;
    }


    function getRawTbnameByPid($pid)
    {
        $sql = "select table_name from nanx_biz_tables  where pid=SHOULD_REPLACE";
        $sql = str_replace('SHOULD_REPLACE', $pid, $sql);
        $rows = $this->db->query($sql)->result_array();
        $raw_tbname = $rows[0]['table_name'];
        return $raw_tbname;
    }

    function index()
    {
    	  
        $post = file_get_contents('php://input');
        $para= (array )json_decode($post);
        $opcode=$para['opcode'];

        $special_opcode=array('create_table','reset_pwd',
             'set_forbidden_col','upload_pic',
             'manage_pic','create_table_from_excel',
             'add_user'
             );

        
        $fix_para_opcode=array('set_activity_pic','add_js_button','add_js_activity'
              );



        if(in_array($opcode,$special_opcode))
        {
        	$this->opcode_route($opcode,$para);
        	return;
        }
        
        if(in_array($opcode,$fix_para_opcode))
        {
        	$para=$this->fix_para($opcode,$para);
        }
        
        
        
        
        
        $cfg = $this->actionCfg();
        $actcfg = $cfg[$opcode];

        $tbused = $actcfg['tbused'];
        $dbcmdtype = $actcfg['dbcmdtype'];

        $paracfg = $actcfg['paracfg'];
        foreach ($paracfg as $key => $value)
        {
            $paracfg[$key] = $para[$value];
        }


        if (array_key_exists('wherecfg', $actcfg))
        {
            $wherecfg = $actcfg['wherecfg'];
            foreach ($wherecfg as $key => $value)
            {
                $wherecfg[$key] = $para[$value];
            }

        }

        if (array_key_exists('prefix_process_field', $actcfg))
        {
            if ($actcfg['prefix_process_field'] == 'base_table')
            {
                $paracfg['base_table'] = $this->getRawTbnameByPid($paracfg['base_table']);
            }
            if ($actcfg['prefix_process_field'] == 'combo_table')
            {
                $paracfg['combo_table'] = $this->getRawTbnameByPid($paracfg['combo_table']);
            }
        }


        if ($dbcmdtype == 'insert')
        {
            if (array_key_exists('default', $actcfg))
            {
                $paracfg = array_merge($paracfg, $actcfg['default']);
            }
            $this->db->insert($tbused, $paracfg);
        }

        if ($dbcmdtype == 'insert_batch')
        {
            if (array_key_exists('default', $actcfg))
            {
                $paracfg = array_merge($paracfg, $actcfg['default']);
            }

            $data = array();
            $batchcol = $actcfg['batch_col'];
            $batchvalue = $paracfg[$batchcol];
            $batcharray = explode(",", $batchvalue);

            for ($i = 0; $i < count($batcharray); $i++)
            {
                $tmp = $paracfg;
                $tmp[$batchcol] = $batcharray[$i];
                $data[] = $tmp;
            }
            $this->db->insert_batch($tbused, $data);
        }

        if ($dbcmdtype == 'delete')
        {
            $this->db->delete($tbused, $paracfg);
        }

        if ($dbcmdtype == 'update')
        {
            $this->db->update($tbused, $paracfg, $wherecfg);
        }


        if ($dbcmdtype == 'set_action')
        {
            $this->db->update($tbused, $paracfg, $wherecfg);
            $this->db->from($tbused)->where($wherecfg);
            if ($this->db->count_all_results() == 0)
            {
                $this->db->insert($tbused, array_merge($paracfg, $wherecfg));
            } else
            {
                $this->db->where($wherecfg);
                $this->db->update($tbused, $paracfg);
            }
        }


        if ($dbcmdtype == 'insert_or_update')
        {
            if (($tbused == 'nanx_biz_column_editor_cfg') && ($opcode ==
                'set_biz_field_combo_resorce'))
            {
                $paracfg['use_combo'] = 1;
            }

            $rows = $this->db->get_where($tbused, $wherecfg)->result_array();
            if (count($rows) == 0)
            {
                $this->db->insert($tbused, array_merge($paracfg, $wherecfg));
            } else
            {
                $this->db->where($wherecfg);
                $this->db->update($tbused, $paracfg);
            }


        }

        if ($dbcmdtype == 'delete_col')
        {

            $tb = $paracfg['usedtable'];
            $dropcol = $paracfg['dropcol'];
            if ($dropcol == 'pid')
            {
                return;
            }
            $sql = "alter table $tb  drop $dropcol   ";
            $this->db->query($sql);
        }


        if ($dbcmdtype == 'rename_col')
        {
            $orgincol = $paracfg['orgincol'];
            if ($orgincol == 'pid')
            {
                return;
            }
            $tb = $paracfg['usedtable'];
            $newname = $paracfg['newcolname'];
            $column_definition = $paracfg['column_definition'];
            $sql = "alter table $tb  change column  $orgincol    $newname    $column_definition ";
            $this->db->query($sql);
        }

        if ($dbcmdtype == 'truncate_table')
        {
            $tb = $paracfg['usedtable'];
            $sql = "truncate table $tb ";
            $this->db->query($sql);
        }


        if ($dbcmdtype == 'rename_table')
        {
            $tb = $paracfg['usedtable'];
            $newtb = $paracfg['newtable'];
            if ($tb == $newtb)
            {
                $sql = 'select 1';
            } else
            {
                $sql = "rename  table $tb  to  $newtb ";
            }
            $this->db->query($sql);
        }


        if ($dbcmdtype == 'reorder_col')
        {
            $tb = $para['nodevalue'];
            $reordered_columns = $para['extradata'];
            $field_definitions = $this->getTableFullFields($tb);
            $reorder_columns_sql = $this->create_reorder_columns_sql($tb, $reordered_columns,
                $field_definitions);
            $this->db->query($reorder_columns_sql);
        }


        if ($dbcmdtype == 'drop_table')
        {
            $tb = $paracfg['usedtable'];
            $sql = "drop   table $tb ";
            $this->db->query($sql);
        }

        $this->sendDbResult($opcode,'');
    }


    function sendDbResult($opcode,$tips)
    {
    	  $success = true;
        $sqlresult_code = $this->db->_error_number();
        $errmsg= $this->db->_error_message();
        if( $sqlresult_code>0 )
        {
        $success = false;
        }        
        
        $res = array(
            'success' => $success,
            'opcode' => $opcode,
             'tips'=> $tips ,
            'errcode'=>  $sqlresult_code,
             'errmsg' => '发生错误,错误信息:<br/>'.$errmsg
            );
        echo json_encode($res);
    }
    
    function opcode_route($opcode,$para)
    {
    	
    	 if ($opcode == 'create_table')
        {
            $DDL = $para['DDL'];
            $tbname = $para['input_0'];
            $biztbname = $para['input_1'];
            $this->createTable($DDL, $tbname, $biztbname);
            return;
        }

       if ($opcode == 'reset_pwd')
        {   
            $new_pwd = $para['input_0'];
            $user=$para['nodevalue'];
            $salt = substr(uniqid(rand()), -6);
            $new_pwd_with_salt= md5(md5($new_pwd).$salt);          
            $this->db->where('user', $user);
            $this->db->update('nanx_user',array('password'=> $new_pwd_with_salt,'salt'=> $salt )); 
            $this->sendDbResult($opcode,'修改成功');
            return;
        }


       if ($opcode == 'add_user')
        {   
            $new_user = $para['input_0'];
            $salt = substr(uniqid(rand()), -6);
            $new_pwd_with_salt= md5(md5('12345678').$salt);          
            $this->db->insert('nanx_user',array('user'=> $new_user, 'active' =>'Y',  'password'=> $new_pwd_with_salt,'salt'=> $salt )); 
            $this->sendDbResult($opcode,'增加用户成功,缺省密码12345678'); 
            return;
        }

      if ($opcode == 'set_forbidden_col')
        {
            $data = array();
            $forbidden_cols = $para['selected_value'];
            $forbidden_cols_array = explode(",", $forbidden_cols);
            $where=array('activity_code'=> $para['hostby'] );
            $this->db->delete('nanx_activity_forbidden_field',$where );
            $data=array();            
            
            for ($i = 0; $i < count($forbidden_cols_array); $i++)
            {
                $tmp =array(
                'activity_code'=> $para['hostby'],
                'field'=>  $forbidden_cols_array[$i] 
                );
                if(strlen($forbidden_cols_array[$i])>0)
                {
                $data[] = $tmp;
                }
            }
          
            if( count($data)>0)
            {
            $this->db->insert_batch('nanx_activity_forbidden_field', $data);
            }
            
            $this->sendDbResult($opcode,'设置成功'); 
            return;
        }
        
         

        if ($opcode == 'upload_pic')
        {
            $this->sendDbResult($opcode,'上传成功'); 
            return;
        }
        
        if ($opcode == 'manage_pic')
        {
            $res = array(
                'success' => 'success',
                'opcode' => $opcode,
                'server_resp' => array('success' => true));
            echo json_encode($res);
            return;
        }
        
        
      

        if ($opcode == 'create_table_from_excel')
        {
            $this->load->model('Mexcel');
            $cfg = $this->Mexcel->excel2table($para);
            return $cfg;
        }

    }
    
     
    function fix_para($opcode,$para){
    	
    	   if ($opcode == 'set_activity_pic')
        {
            $para['piccb'] = basename($para['piccb']);
            $config['image_library'] = 'gd2';
            $config['source_image'] = 'imgs/'.$para['piccb'];
            $config['create_thumb'] = TRUE;
            $config['maintain_ratio'] = TRUE;
            $config['width'] = 14;
            $config['height'] = 14;
            $this->load->library('image_lib', $config);
            $this->image_lib->resize();
            $f  =  pathinfo ($para['piccb']);   
            $src='imgs/'.$f['filename'].'_thumb.'.$f['extension'];
            $dest='imgs/thumbs/'.$para['piccb'];
            rename($src,$dest);
            return $para;
        }

    
        if($opcode == 'add_js_button')
        {
        	$para['file2upload']=basename($para['file2upload']);
          return $para;
        }    


       if($opcode == 'add_js_activity')
        {
        	$para['file2upload']=basename($para['file2upload']);
          return $para;
        }    
    }
    
    
    
    function createTable($DDL, $rawtb, $biz)
    {
        if (strlen($biz) == 0)
        {
            $biz = $rawtb;
        }
        $sql = str_replace("TB_TO_REPLACE", $rawtb, $DDL);
        $ret = $this->db->query($sql);
        $errmsg = $this->db->_error_message();
        $errno = $this->db->_error_number();
        $success = true;
        if ($errno == 0)
        {
            $a = array('table_name' => $rawtb, 'table_screen_name' => $biz);
            $this->db->insert('nanx_biz_tables', $a);
        } else
        {
            $success = false;
        }

        $result = array(
            'success' => $success,
            'errmsg' => $errmsg,
            'errno' => $errno);
        echo json_encode($result);
    }

    function dnd()
    {
        $post = file_get_contents('php://input');
        $para= (array )json_decode($post);
     
        $src = (array )$para['src'];
        $target = (array )$para['target'];
        $opcode = $this->getDnDOpcode($src, $target);
        $DndCfgs = $this->DndCfg();
        $dnd_opcfg = $DndCfgs[$opcode];

        $tbused = $dnd_opcfg['tbused'];
        $dbcmdtype = $dnd_opcfg['dbcmdtype'];

        $paracfg = $dnd_opcfg['paracfg'];

        $data = array();
        $data = $this->getDndData($paracfg, $src, $target);

        if ($dbcmdtype == 'update')
        {
            $wherecfg = $dnd_opcfg['wherecfg'];
            $where = $this->getDndWhere($wherecfg, $src, $target);
            $this->db->update($tbused, $data, $where);
        } 
        else
        {
            $this->db->insert($tbused, $data);
        }
        
        $errno = $this->db->_error_number();
        
        if($errno==0)
        {
        	   $res = array(
            'success' => true,
            'opcode' => $opcode,
            'msg'=>'操作成功' 
            );
        }
        else
        {
            $res = array(
            'success' => false,
            'opcode' => $opcode,
            'msg'=>'操作失败' 
            );
        }
        
        
      
            
            
        echo json_encode($res);
    }

    function getDndData($paracfg, $src, $target)
    {
        $data = array();
        foreach ($paracfg as $field => $field_cfg)
        {
            $f_src = $field_cfg['paraused'];
            $f_key_used = $field_cfg['value'];
            if ($f_src == 'src')
            {
                $value = $src[$f_key_used];
            }
            if ($f_src == 'target')
            {
                $value = $target[$f_key_used];
            }
            $data[$field] = $value;
        }
        return $data;
    }


    function getDndWhere($paracfg, $src, $target)
    {
        $where = array();
        foreach ($paracfg as $field => $field_cfg)
        {
            $f_src = $field_cfg['paraused'];
            $f_key_used = $field_cfg['value'];
            if ($f_src == 'src')
            {
                $value = $src[$f_key_used];
            }
            if ($f_src == 'target')
            {
                $value = $target[$f_key_used];
            }
            $where[$field] = $value;
        }
        return $where;
    }

    function getDnDOpcode($src, $target)
    {
        $src_cate = $src['category'];
        $target_cate = $target['category'];
        $dnd_opcode_cfgs = $this->getDndOpcodeCfg();

        foreach ($dnd_opcode_cfgs as $opcode => $cfg)
        {
            if (($cfg['src'] == $src_cate) && ($cfg['target'] == $target_cate))
            {
                $opcode_found = $opcode;
                break;
            }
        }
        return $opcode_found;
    }


    function getTableFullFields($table)
    {
        return $this->db->query(" show full fields from $table")->result_array();
    }


    function create_reorder_columns_sql($table, $reordered_columns, $fields)
    {
        $table_fields = array();
        foreach ($fields as $field)
        {
            $table_fields[$field['Field']] = $field;
        }
        $field_definitions = array();
        foreach ($reordered_columns as $key => $column)
        {
            $field = $table_fields[$column->value];
            $definition = " MODIFY ";
            if ($field['Field'])
            {
                $definition .= " $field[Field] ";
            }
            if ($field['Type'])
            {
                $definition .= "  $field[Type]  ";
            }
            if ($field['Null'] == "NO")
            {
                $definition .= " NOT NULL ";
            } elseif ($field['Null'] == "YES")
            {
                $definition .= " NULL ";
            }
            if ($field['Collation'])
            {
                $definition .= " COLLATE $field[Collation] ";
            }
            if ($field['Default'])
            {
                $datatype = array_shift(explode("(", $field['Type']));
                if (preg_match_all("/[\s]/", $field['Default'], $matches) || strtolower($datatype) ==
                    "enum")
                {
                    $field['Default'] = "'" . $field['Default'] . "'";
                }
                $definition .= " DEFAULT $field[Default] ";
            }
            if ($field['Extra'] == "auto_increment")
            {
                $definition .= " AUTO_INCREMENT ";
            }
            if ($field['Comment'])
            {
                $definition .= " COMMENT '$field[Comment]' ";
            }
            if ($key < 1)
            {
                $definition .= " FIRST ";
            } else
            {
                $definition .= " AFTER " . $reordered_columns[$key - 1]->value;
            }
            $field_definitions[] = $definition;
        }
        $field_definition_str = implode(", ", $field_definitions);
        $sql = "ALTER TABLE $table $field_definition_str";
        return $sql;
    }


    function resize_image($file, $w, $h, $crop=FALSE) {
    list($width, $height) = getimagesize($file);
    $r = $width / $height;
    if ($crop) {
        if ($width > $height) {
            $width = ceil($width-($width*($r-$w/$h)));
        } else {
            $height = ceil($height-($height*($r-$w/$h)));
        }
        $newwidth = $w;
        $newheight = $h;
    } else {
        if ($w/$h > $r) {
            $newwidth = $h*$r;
            $newheight = $h;
        } else {
            $newheight = $w/$r;
            $newwidth = $w;
        }
    }
    $src = imagecreatefromjpeg($file);
    $dst = imagecreatetruecolor($newwidth, $newheight);
    imagecopyresampled($dst, $src, 0, 0, 0, 0, $newwidth, $newheight, $width, $height);

    return $dst;
    }




}

?>
